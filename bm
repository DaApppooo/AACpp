#!/bin/env python3
# Bullshit make
from os import listdir, path, remove, stat, system, rename, makedirs
import re
from sys import argv, exit
from json import load, dump
import shlex

FLAG_DEBUG = 1
VERBOSE = True
CC = "g++"
SRC_PATH = "src"
CFLAGS = f"-std=c++20 -D FILE_DIALOG -I include -I include/piper -I src/shared -I {SRC_PATH} -g" + ("" if not FLAG_DEBUG else " -D DEBUG")
LFLAGS = (
"""
-Llib -lnfd -lraylib -lspng -lpiper -liniparser -lespeak-ng
-lonnxruntime -lpiper_phonemize -lui -dynamic
-lGL -lm -lpthread -ldl -lrt -lX11 -lz
-dynamic `pkg-config --cflags --libs gtk+-3.0`
""".replace('\n', ' ')
)
LIB_DIR = "lib"
OBJ_PATH = "temp"
BIN = "bin/aac" # Bin path is deduced from this.
CONFIG = "config/bm.json" # Same here
EXT = ".cpp"
CXML = "cxml"
EXAMPLE = "./bin/aac"

pwd = __file__.rsplit(path.sep,1)[0]
def rls(path_, filter = lambda x: True):
	for target in listdir(path_):
		target = f"{path_}/{target}"
		if path.isdir(target):
			for ret in rls(target, filter):
				yield ret
		else:
			if filter(target):
				yield target
def last_ch(path: str):
	return stat(path).st_mtime
def load_opt():
	global opt
	try:
		with open(CONFIG, "r") as f:
			opt = load(f)
	except FileNotFoundError:
		print("[bm] Failed to open options.")
		opt = {}
def save_opt():
	global opt
	with open(CONFIG, "w") as f:
		dump(opt, f)
def yeet(code: int):
	save_opt()
	print(f"Exited with code {(code>>8)&0xff}")
	exit(code)
def fixmissing_files_opt():
	for path_ in rls(
		SRC_PATH,
		lambda p:
			p[-len(EXT):] == EXT
		and p not in opt
	):
		# Iter through all source .cpp files and check if there are any missing in the options
		if path_ not in opt:
			opt[path_] = last_ch(path_)
def compile_all(check_ch_time = True, cflags = ""):
	r = []
	for path_ in rls(
		SRC_PATH,
		lambda p:
			p[-len(EXT):] == EXT
	):
		# Iter through all source .cpp files
		if (not check_ch_time) or opt[path_] < last_ch(path_):
			r.append(compile_to_obj(path_, cflags))
	return r
def compile_to_obj(p: str, cflags=""):
	""" cflags are additional flags to the setting CFLAGS """
	out_path = f"{OBJ_PATH}/{path.basename(p)}"[:-len(EXT)] + '.o'
	cmd = f"{CC} -c {p} -o {out_path} {CFLAGS} {cflags}"
	if code := shell(cmd):
		yeet(code)
	else:
		opt[p] = last_ch(p)
		return {"directory":pwd, "arguments":shlex.split(cmd), "file":p}
def link_all(cflags = ""):
	""" cflags are additional flags to the setting CFLAGS """
	j = " ".join(rls(OBJ_PATH, lambda x: x[-2:] == ".o"))
	if not j:
		raise Exception("Wtf ???")
	if code := shell(f"{CC} {j} -o {BIN} {CFLAGS} {cflags} {LFLAGS}"):
		yeet(code)
def run_example():
	if code := shell(f"LD_LIBRARY_PATH={LIB_DIR} {EXAMPLE}"):
		yeet(code)
def debugging(tool: str):
	match tool:
		case "valgrind" | "mem" | "v":
			LEAK_CHECK = "--leak-check=full --show-leak-kinds=all"
			if code := shell(f"LD_LIBRARY_PATH={LIB_DIR} valgrind -s -- {BIN}"):
				yeet(code)
		# add more tools here
		case _:
			if code := shell(f"LD_LIBRARY_PATH={LIB_DIR} gdb {BIN}"):
				yeet(code)

if VERBOSE:
	def shell(cmd: str) -> int:
		print(cmd)
		return system(cmd)
else:
	shell = system

if not path.exists(OBJ_PATH):
	makedirs(OBJ_PATH, exist_ok=True)
BIN_PATH = BIN.rsplit('/', 1)[0]
if not path.exists(BIN_PATH):
	makedirs(BIN_PATH, exist_ok=True)
CONFIG_PATH = CONFIG.rsplit('/', 1)[0]
if not path.exists(CONFIG_PATH):
	makedirs(CONFIG_PATH, exist_ok=True)

load_opt()
fixmissing_files_opt()
if __name__ == "__main__":
	if len(argv) == 1:
		compile_all(cflags="-O0") # Avoid any optimization for a simple test run
		link_all()
		run_example()
		yeet(0)

	match argv[1]:
		case "cxml":
			for i in rls("cxml", lambda x: x.endswith(".cxml")):
				if err := shell(f"python3 cxml/trans.py {i}"):
					yeet(err)
			if err := shell(f"g++ -fPIC -o cxml/ui.so {CFLAGS} -shared {CXML}/*.cpp"):
				yeet(1)
			rename("cxml/ui.so", "lib/libui.so")
		case "all":
			r = compile_all(check_ch_time=False, cflags="-O0")
			with open("compile_commands.json", "w") as f:
				dump(r, f)
			yeet(0)
		case "production":
			compile_all(check_ch_time=False, cflags="-O3")
			link_all()
			yeet(0)
		case "dbg" | "gdb" | "debug" | "d" | "fd":
			# 'fd' is fast debug (won't recompile everything)
			if argv[1] != "fd":
				shell("./bm all")
			link_all(cflags="-O0")
			debugging("" if len(argv) == 2 else argv[2])
			yeet(0)
		case "clear" | "clean":
			shell("rm temp/*")
			yeet(0)
		case "copy":
			if err := shell(f"cp {__file__} ."):
				yeet(err)
			yeet(0)
		case _:
			print("Syntax: bm [arg]")
			print("\targ can either be 'c', 'all', 'dbg', 'clean', 'copy', or 'production'")

